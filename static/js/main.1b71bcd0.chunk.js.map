{"version":3,"sources":["components/Container/index.js","components/Col/index.js","components/Row/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/ColorTile/index.js","components/Scorebox/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","Object","assign","className","concat","fluid","Col","size","split","map","join","Row","Wrapper","Navbar","href","title","ColorTile","value","id","onClick","handleClick","style","backgroundColor","bg","Scorebox","currentScore","highScore","App","state","colors","isClicked","_this","indexOf","handleIncrement","setState","handleColorMix","handleReset","mixedColors","arr","i","length","j","Math","floor","random","_ref","colorMix","incrementScore","alert","_this2","this","components_Wrapper","components_Navbar","components_Container","components_Scorebox","components_Row","color","components_Col","components_ColorTile","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b71bcd0.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React from \"react\";\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return <div className={size} {...props} />;\n}\n\nexport default Col;\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Row;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Navbar = props => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n      <div className=\"brand mx-auto\">\n          <p className=\"animated flash title\"><a href=\"/\">{props.title}</a></p>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Each color tile is imbued with a click handler and a unique color that's passed down as a prop taken from colors.json\r\nconst ColorTile = props => {\r\n  return (\r\n    <div\r\n      className=\"card hvr-radial-out\"\r\n      value={props.id}\r\n      onClick={() => props.handleClick(props.id)}\r\n      style={{backgroundColor: props.bg}}\r\n    />\r\n  );  \r\n};\r\n\r\nexport default ColorTile;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Scorebox = props => {\r\n  return (\r\n    <div className=\"scorebox container mx-auto\">\r\n        <h3 className=\"text-center\">Try to click each color, but only once! Click any color twice and your score will reset</h3>\r\n\r\n        <p className=\"text-center font-weight-bold\">Current Score: {props.currentScore} | High Score: {props.highScore}</p>\r\n    </div>\r\n  );  \r\n};\r\n\r\nexport default Scorebox;","import React, { Component } from 'react';\nimport Container from './components/Container';\nimport Col from './components/Col';\nimport Row from './components/Row';\nimport Wrapper from './components/Wrapper';\nimport Navbar from './components/Navbar';\nimport ColorTile from './components/ColorTile';\nimport Scorebox from './components/Scorebox'\nimport colors from './colors.json'\nimport './App.css';\n\n// Function for mixing up all the color tiles in the display\nfunction colorMix(arr) {\n  for (let i = arr.length -1; i > 0; i--) {\n    // Randomized placement of array components effectively mixes them all up each time this function is called\n    let j = Math.floor(Math.random() * (i + 1));\n    [arr[i], arr[j]] = [arr[j], arr[i]];\n  }\n  return arr;\n};\n\nclass App extends Component {\n\n  // Set the initial state of the app component \n  state = {\n    colors,\n    currentScore: 0,\n    highScore: 0,\n    isClicked: [],\n  };\n\n  // Event handler for clicks on color tiles\n  handleClick = id => {\n    if (this.state.isClicked.indexOf(id) === -1) {\n      // Increment score, update click state, and mix up the colors\n      this.handleIncrement();\n      this.setState({ isClicked: this.state.isClicked.concat(id) });\n      this.handleColorMix();\n    } else {\n      // Reset score and mix up colors\n      this.handleReset();\n    }\n  };\n\n  // Handle mixing of the color tiles\n  handleColorMix = () => {\n    let mixedColors = colorMix(colors);\n    this.setState({ colors: mixedColors });\n  };\n\n  //  Handle incrementing the score by 1 as user clicks on correct tiles\n  handleIncrement = () => {\n    const incrementScore = this.state.currentScore + 1;\n    this.setState({ currentScore: incrementScore});\n    // Set the high score to the incremented score if user gets to a higher number\n    if (incrementScore >= this.state.highScore) {\n      this.setState({ highScore: incrementScore})\n    }\n    else if (incrementScore === 12) {\n      alert(\"👏  WE HAVE A WINNER!  👏\")\n    }\n  };\n\n  // Handle resetting the score (but not the high score!)\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      highScore: this.state.highScore,\n      isClicked: []\n    });\n    // Mix up colors again after resetting current score and click status\n    this.handleColorMix();\n  };\n  \n  // Render my display for the main page of the application \n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          title=\"MEMORY COLOR CLICKER\"\n        />\n\n        <Container>\n          <Scorebox\n            currentScore={this.state.currentScore}\n            highScore={this.state.highScore}\n          />\n        </Container>\n\n        <Container>\n          <Row>\n            {this.state.colors.map(color => (\n              <Col size=\"md-3 sm-3\">\n                <ColorTile\n                  key={color.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  id={color.id}\n                  bg={color.color}\n                />\n              </Col>\n            ))}\n          </Row>\n        </Container>\n      </Wrapper>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}